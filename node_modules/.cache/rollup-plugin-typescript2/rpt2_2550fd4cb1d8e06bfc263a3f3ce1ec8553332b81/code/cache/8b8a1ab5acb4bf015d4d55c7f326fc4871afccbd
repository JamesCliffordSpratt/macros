{"code":"import { __awaiter } from \"tslib\";\nimport { requestUrl } from 'obsidian';\nimport * as CryptoJS from 'crypto-js';\nimport { extractServingSize } from './utils';\n/*\n * API Integration for Macros Plugin\n * -------------------------------------------\n * Handles API calls to the FatSecret platform.\n * This module:\n *  - Constructs OAuth-signed requests.\n *  - Fetches food data using user-provided search terms.\n *  - Filters and processes API responses to ensure valid serving sizes (in grams).\n *\n * NOTE: Hard-coded API credentials are used during development.\n */\n// @ts-ignore\nconst OAuth = require('oauth-1.0a');\n/**\n * Fetches food data from the FatSecret API.\n * @returns A Promise that resolves to an array of FoodItem objects.\n */\nexport function fetchFoodData(app, foodName, pageNumber, maxResults, apiKey, apiSecret) {\n    return __awaiter(this, void 0, void 0, function* () {\n        var _a;\n        // Initialize OAuth with HMAC-SHA1 signature method.\n        const oauth = new OAuth({\n            consumer: { key: apiKey, secret: apiSecret },\n            signature_method: 'HMAC-SHA1',\n            hash_function(baseString, key) {\n                return CryptoJS.HmacSHA1(baseString, key).toString(CryptoJS.enc.Base64);\n            },\n        });\n        // Prepare request parameters.\n        const requestData = {\n            url: 'https://platform.fatsecret.com/rest/server.api',\n            method: 'GET',\n            data: {\n                method: 'foods.search',\n                format: 'json',\n                search_expression: foodName,\n                measurement_grams: '100',\n                page_number: pageNumber.toString(),\n                max_results: maxResults.toString(),\n            },\n        };\n        // Append OAuth authorization parameters.\n        const fullUrl = requestData.url + '?' + new URLSearchParams(Object.assign(Object.assign({}, requestData.data), oauth.authorize(requestData))).toString();\n        console.log('FatSecret request URL:', fullUrl);\n        try {\n            const response = yield requestUrl({ url: fullUrl, method: 'GET' });\n            console.log('FatSecret API Response:', response.json);\n            // Check if the response contains an error property.\n            if (response.json && response.json.error) {\n                const errorText = String(response.json.error);\n                console.error('FatSecret API error:', errorText);\n                // Log a special message if the error suggests invalid credentials.\n                if (errorText.toLowerCase().includes('invalid')) {\n                    console.error('Invalid API credentials detected. Please check your FatSecret API credentials.');\n                }\n                return [];\n            }\n            if ((_a = response.json.foods) === null || _a === void 0 ? void 0 : _a.food) {\n                const foods = response.json.foods.food;\n                if (Array.isArray(foods)) {\n                    // Filter only items with a valid serving size.\n                    return foods.filter(food => {\n                        const s = extractServingSize(food.food_description);\n                        return s.toLowerCase().endsWith('g');\n                    });\n                }\n                else {\n                    const s = extractServingSize(foods.food_description);\n                    return s.toLowerCase().endsWith('g') ? [foods] : [];\n                }\n            }\n            else {\n                console.warn('No \"food\" field in response:', response.json);\n                return [];\n            }\n        }\n        catch (error) {\n            console.error('Error fetching food data:', error);\n            return [];\n        }\n    });\n}\n","references":["C:/Users/James/Desktop/obsidian-macros-plugin/types/obsidian.d.ts","C:/Users/James/Desktop/obsidian-macros-plugin/node_modules/@types/crypto-js/index.d.ts","C:/Users/James/Desktop/obsidian-macros-plugin/utils.ts"]}
