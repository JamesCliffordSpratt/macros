{"code":"import { __awaiter } from \"tslib\";\nimport { Modal, Notice } from 'obsidian';\nimport { parseGrams, processNutritionalData, findMatchingFoodFile } from './utils';\nimport { fetchFoodData } from './api';\nimport { extractServingSize } from './utils';\n/*\n * Modals for Macros Plugin\n * -----------------------------------\n * This file defines all custom modals for the plugin.\n * These include:\n *  - FoodSearchModal: To prompt the user for a food search term.\n *  - FoodResultsModal: To display the search results fetched from the FatSecret API.\n *  - AddToMacrosModal: To allow users to add selected food items or meal templates to a macros block.\n *  - AddMealTemplateModal: For creating new meal templates.\n *  - EditMealTemplateModal: For editing an existing meal template.\n *  - CustomServingSizeModal: For specifying a custom serving size.\n *  - AddFoodToMealModal: For adding food items to a meal template.\n */\n/**\n * AddToMacrosModal\n * ----------------\n * A modal dialog that allows users to add selected food items or meal templates to a macros table.\n *\n * @param app - The Obsidian application instance.\n * @param plugin - The instance of MacrosPlugin.\n * @param tableId - The unique identifier for the macros table.\n * @param onDone - A callback function invoked after changes are confirmed.\n */\nexport class AddToMacrosModal extends Modal {\n    constructor(app, plugin, tableId, onDone) {\n        super(app);\n        this.selectedItems = [];\n        this.plugin = plugin;\n        this.tableId = tableId;\n        this.onDone = onDone;\n    }\n    onOpen() {\n        const { contentEl } = this;\n        contentEl.empty();\n        contentEl.createEl('h2', { text: 'Add to Macros' });\n        // Meal row.\n        const mealRow = contentEl.createDiv({\n            cls: 'add-to-macros-row',\n            attr: { style: 'display: flex; align-items: center; gap: 0.5rem; margin-bottom: 1rem;' }\n        });\n        mealRow.createEl('label', { text: 'Select Meal:' });\n        const mealSelect = mealRow.createEl('select');\n        mealSelect.createEl('option', { text: '-- None --', value: '' });\n        this.plugin.settings.mealTemplates.forEach((meal) => {\n            mealSelect.createEl('option', { text: meal.name, value: `interactive:meal:${meal.name}` });\n        });\n        const addMealBtn = mealRow.createEl('button', { text: 'Add Meal' });\n        addMealBtn.onclick = () => {\n            const mealValue = mealSelect.value;\n            if (mealValue) {\n                // Always add the meal, even if it's already in the list\n                // This allows for multiple instances of the same meal\n                this.selectedItems.push(mealValue);\n                refreshSummary();\n                mealSelect.value = '';\n                console.log(`Added meal to selectedItems: ${mealValue}`);\n                console.log(`Current selectedItems:`, this.selectedItems);\n            }\n        };\n        // Food row.\n        const foodRow = contentEl.createDiv({\n            cls: 'add-to-macros-row',\n            attr: { style: 'display: flex; align-items: center; gap: 0.5rem; margin-bottom: 1rem;' }\n        });\n        foodRow.createEl('label', { text: 'Select Food:' });\n        const foodSelect = foodRow.createEl('select');\n        foodSelect.createEl('option', { text: '-- None --', value: '' });\n        const folder = this.plugin.settings.storageFolder;\n        const fileList = this.app.vault.getFiles().filter((f) => f.path.startsWith(folder));\n        const foodNames = fileList.map((f) => f.name.replace(/\\.md$/, ''));\n        foodNames.forEach((food) => {\n            foodSelect.createEl('option', { text: food, value: 'interactive:' + food });\n        });\n        const addFoodBtn = foodRow.createEl('button', { text: 'Add Food' });\n        addFoodBtn.onclick = () => __awaiter(this, void 0, void 0, function* () {\n            const foodValue = foodSelect.value;\n            if (foodValue) {\n                const foodName = foodValue.substring('interactive:'.length);\n                const file = findMatchingFoodFile(fileList, foodName);\n                if (!file) {\n                    new Notice('Food item not found.');\n                    return;\n                }\n                const nutrition = processNutritionalData(this.app, file);\n                if (!nutrition || !nutrition.serving) {\n                    new Notice('Could not process nutrition data for this food.');\n                    return;\n                }\n                const defaultServing = parseGrams(nutrition.serving);\n                new CustomServingSizeModal(this.app, foodName, defaultServing, (customServing) => __awaiter(this, void 0, void 0, function* () {\n                    const newItem = `interactive:${foodName}:${customServing}g`;\n                    this.selectedItems.push(newItem);\n                    refreshSummary();\n                })).open();\n                foodSelect.value = '';\n            }\n        });\n        // Summary.\n        const summaryDiv = contentEl.createDiv({\n            cls: 'macro-summary-div',\n            attr: { style: 'margin-bottom: 1rem;' }\n        });\n        summaryDiv.createEl('h3', { text: 'Items to add:' });\n        const summaryList = summaryDiv.createEl('ul');\n        const refreshSummary = () => {\n            summaryList.empty();\n            this.selectedItems.forEach((item, index) => {\n                const displayText = item.startsWith('interactive:') ? item.substring('interactive:'.length) : item;\n                const listItem = summaryList.createEl('li');\n                listItem.createEl('span', { text: displayText });\n                // Add a remove button for each item\n                const removeBtn = listItem.createEl('button', {\n                    text: ' Ã—',\n                    attr: { style: 'margin-left: 8px; cursor: pointer;' }\n                });\n                removeBtn.onclick = () => {\n                    this.selectedItems.splice(index, 1);\n                    refreshSummary();\n                };\n            });\n        };\n        const confirmBtn = contentEl.createEl('button', {\n            text: 'Confirm Changes',\n            attr: { style: 'margin-top: 0.5rem;' }\n        });\n        confirmBtn.onclick = () => __awaiter(this, void 0, void 0, function* () {\n            if (!this.plugin.additionalMacros.has(this.tableId)) {\n                this.plugin.additionalMacros.set(this.tableId, []);\n            }\n            const arr = this.plugin.additionalMacros.get(this.tableId);\n            this.selectedItems.forEach(item => arr.push(item));\n            console.log(`Confirming changes for table ${this.tableId}`);\n            console.log(`additionalMacros for table:`, arr);\n            yield this.onDone();\n            this.close();\n        });\n    }\n    onClose() {\n        this.contentEl.empty();\n    }\n}\n/**\n * FoodSearchModal\n * ---------------\n * A modal that prompts the user to enter a food search term.\n *\n * @param app - The Obsidian application instance.\n * @param onSubmit - A callback function to handle the submitted search term.\n */\nexport class FoodSearchModal extends Modal {\n    constructor(app, onSubmit) {\n        super(app);\n        this.onSubmit = onSubmit;\n    }\n    onOpen() {\n        const { contentEl } = this;\n        contentEl.createEl('h2', { text: 'Enter Food Search Term' });\n        const inputEl = contentEl.createEl('input', { type: 'text' });\n        inputEl.placeholder = 'e.g. Apple';\n        inputEl.addEventListener('keydown', (event) => {\n            if (event.key === 'Enter') {\n                event.preventDefault();\n                this.onSubmit(inputEl.value);\n                this.close();\n            }\n        });\n        inputEl.focus();\n    }\n    onClose() {\n        this.contentEl.empty();\n    }\n}\n/**\n * FoodResultsModal\n * ----------------\n * Displays a list of food items fetched from the FatSecret API based on the user's search term.\n *\n * @param app - The Obsidian application instance.\n * @param searchTerm - The search term provided by the user.\n * @param apiKey - The FatSecret API key.\n * @param apiSecret - The FatSecret API secret.\n * @param onSelect - A callback function that handles the selection of a food item.\n */\nexport class FoodResultsModal extends Modal {\n    constructor(app, searchTerm, apiKey, apiSecret, onSelect) {\n        super(app);\n        this.currentPage = 0;\n        this.results = [];\n        this.maxResults = 20;\n        this.searchTerm = searchTerm;\n        this.apiKey = apiKey;\n        this.apiSecret = apiSecret;\n        this.onSelect = onSelect;\n    }\n    loadPage(page) {\n        return __awaiter(this, void 0, void 0, function* () {\n            try {\n                this.currentPage = page;\n                this.results = yield fetchFoodData(this.app, this.searchTerm, this.currentPage, this.maxResults, this.apiKey, this.apiSecret);\n                this.renderContent();\n            }\n            catch (error) {\n                console.error('Error loading food data:', error);\n                new Notice('Error fetching food data');\n            }\n        });\n    }\n    renderContent() {\n        const { contentEl } = this;\n        contentEl.empty();\n        contentEl.createEl('h2', { text: `Results for \"${this.searchTerm}\" (Page ${this.currentPage + 1})` });\n        if (this.results.length === 0) {\n            contentEl.createEl('p', { text: 'No results found on this page.' });\n        }\n        else {\n            this.results.forEach((food) => {\n                const servingSize = extractServingSize(food.food_description);\n                const btn = contentEl.createEl('button', { text: `${food.food_name} - ${servingSize}` });\n                btn.onclick = () => {\n                    this.onSelect(food);\n                    this.close();\n                };\n            });\n        }\n        const navDiv = contentEl.createDiv({ cls: 'food-nav' });\n        if (this.currentPage > 0) {\n            const prevBtn = navDiv.createEl('button', { text: '< Prev' });\n            prevBtn.onclick = () => this.loadPage(this.currentPage - 1);\n        }\n        navDiv.createEl('span', { text: ` Page ${this.currentPage + 1} ` });\n        if (this.results.length === this.maxResults) {\n            const nextBtn = navDiv.createEl('button', { text: 'Next >' });\n            nextBtn.onclick = () => this.loadPage(this.currentPage + 1);\n        }\n    }\n    onOpen() {\n        return __awaiter(this, void 0, void 0, function* () {\n            yield this.loadPage(0);\n        });\n    }\n    onClose() {\n        this.contentEl.empty();\n    }\n}\n/**\n * AddMealTemplateModal\n * --------------------\n * Provides a modal interface for creating a new meal template.\n *\n * @param plugin - The instance of MacrosPlugin.\n */\nexport class AddMealTemplateModal extends Modal {\n    constructor(plugin) {\n        super(plugin.app);\n        this.plugin = plugin;\n    }\n    onOpen() {\n        const { contentEl } = this;\n        contentEl.createEl('h2', { text: 'New Meal Template' });\n        const nameInput = contentEl.createEl('input', { type: 'text' });\n        nameInput.placeholder = 'Meal Name (e.g., Meal1)';\n        const createMeal = () => __awaiter(this, void 0, void 0, function* () {\n            const mealName = nameInput.value.trim();\n            if (!mealName) {\n                new Notice('Please enter a valid meal name.');\n                return;\n            }\n            if (this.plugin.settings.mealTemplates.some((m) => m.name.toLowerCase() === mealName.toLowerCase())) {\n                new Notice('A meal template with that name already exists. Please choose a different name.');\n                return;\n            }\n            const newMeal = {\n                name: mealName,\n                items: [],\n            };\n            this.plugin.settings.mealTemplates.push(newMeal);\n            yield this.plugin.saveSettings();\n            this.close();\n            new AddFoodToMealModal(this.plugin, newMeal).open();\n            this.plugin.nutritionalSettingTab.display();\n        });\n        nameInput.addEventListener('keydown', (event) => {\n            if (event.key === 'Enter') {\n                event.preventDefault();\n                createMeal();\n            }\n        });\n        const createBtn = contentEl.createEl('button', { text: 'Create Meal Template' });\n        createBtn.onclick = createMeal;\n    }\n    onClose() {\n        this.contentEl.empty();\n    }\n}\n/**\n * EditMealTemplateModal\n * ---------------------\n * Enables editing of an existing meal template, allowing the user to modify the list of food items.\n *\n * @param plugin - The instance of MacrosPlugin.\n * @param meal - The meal template object being edited.\n */\nexport class EditMealTemplateModal extends Modal {\n    constructor(plugin, meal) {\n        super(plugin.app);\n        this.plugin = plugin;\n        this.meal = meal;\n    }\n    renderContent() {\n        const { contentEl } = this;\n        contentEl.empty();\n        contentEl.createEl('h2', { text: `Edit Meal: ${this.meal.name}` });\n        const itemList = contentEl.createEl('ul');\n        this.meal.items.forEach((item, index) => {\n            const li = itemList.createEl('li');\n            li.createEl('span', { text: item });\n            const removeBtn = li.createEl('button', { text: 'Remove' });\n            removeBtn.style.marginLeft = '8px';\n            removeBtn.onclick = () => __awaiter(this, void 0, void 0, function* () {\n                if (this.meal.items.length <= 1) {\n                    new Notice('You must have at least 1 food item');\n                    return;\n                }\n                this.meal.items.splice(index, 1);\n                yield this.plugin.saveSettings();\n                this.close();\n                this.plugin.nutritionalSettingTab.display();\n            });\n        });\n        const addFoodBtn = contentEl.createEl('button', { text: '+ Add Food Item' });\n        addFoodBtn.onclick = () => {\n            new AddFoodToMealModal(this.plugin, this.meal).open();\n            this.close();\n            this.plugin.nutritionalSettingTab.display();\n        };\n    }\n    onOpen() {\n        this.renderContent();\n    }\n    onClose() {\n        this.contentEl.empty();\n    }\n}\n/**\n * CustomServingSizeModal\n * ----------------------\n * A modal dialog that allows the user to specify a custom serving size for a selected food item.\n *\n * @param app - The Obsidian application instance.\n * @param foodName - The name of the food item.\n * @param defaultServing - The default serving size value (in grams).\n * @param onSubmit - A callback function that receives the custom serving size.\n */\nexport class CustomServingSizeModal extends Modal {\n    constructor(app, foodName, defaultServing, onSubmit) {\n        super(app);\n        this.foodName = foodName;\n        this.defaultServing = defaultServing;\n        this.onSubmit = onSubmit;\n    }\n    onOpen() {\n        const { contentEl } = this;\n        contentEl.createEl('h2', { text: `Custom Serving Size for ${this.foodName}` });\n        contentEl.createEl('p', { text: `Default serving is ${this.defaultServing}g. Enter a custom serving size in grams:` });\n        const inputEl = contentEl.createEl('input', { type: 'number' });\n        inputEl.placeholder = `${this.defaultServing}`;\n        inputEl.value = `${this.defaultServing}`;\n        inputEl.addEventListener('keydown', (event) => {\n            if (event.key === 'Enter') {\n                event.preventDefault();\n                const value = parseFloat(inputEl.value);\n                if (isNaN(value) || value <= 0) {\n                    new Notice('Please enter a valid serving size.');\n                }\n                else {\n                    this.onSubmit(value);\n                    this.close();\n                }\n            }\n        });\n        const submitBtn = contentEl.createEl('button', { text: 'Submit' });\n        submitBtn.onclick = () => {\n            const value = parseFloat(inputEl.value);\n            if (isNaN(value) || value <= 0) {\n                new Notice('Please enter a valid serving size.');\n            }\n            else {\n                this.onSubmit(value);\n                this.close();\n            }\n        };\n        inputEl.focus();\n    }\n    onClose() {\n        this.contentEl.empty();\n    }\n}\n/**\n * AddFoodToMealModal\n * ------------------\n * Presents a modal that allows the user to add food items to an existing meal template.\n *\n * @param plugin - The instance of MacrosPlugin.\n * @param meal - The meal template to which food will be added.\n */\nclass AddFoodToMealModal extends Modal {\n    constructor(plugin, meal) {\n        super(plugin.app);\n        this.files = [];\n        this.itemListEl = null;\n        this.plugin = plugin;\n        this.meal = meal;\n    }\n    onOpen() {\n        const { contentEl } = this;\n        contentEl.createEl('h2', { text: `Add Food Items to \"${this.meal.name}\"` });\n        const row = contentEl.createDiv({\n            cls: 'add-food-row',\n            attr: { style: 'display: flex; align-items: center; gap: 0.5rem; margin-bottom: 1rem;' }\n        });\n        const folder = this.plugin.settings.storageFolder;\n        const fileList = this.app.vault.getFiles().filter(f => f.path.startsWith(folder));\n        this.files = fileList.map(f => f.name.replace(/\\.md$/, ''));\n        const dropdown = row.createEl('select');\n        dropdown.createEl('option', { text: '-- Select Food --', value: '' });\n        this.files.forEach(fname => {\n            const option = dropdown.createEl('option');\n            option.value = fname;\n            option.text = fname;\n        });\n        const addBtn = row.createEl('button', { text: '+ Add Selected Item' });\n        addBtn.onclick = () => __awaiter(this, void 0, void 0, function* () {\n            const selected = dropdown.value;\n            if (selected && !this.meal.items.some(item => item.startsWith(selected))) {\n                const matchingFile = findMatchingFoodFile(fileList, selected);\n                if (!matchingFile) {\n                    new Notice('Selected food item not found.');\n                    return;\n                }\n                const nutrition = processNutritionalData(this.app, matchingFile);\n                if (!nutrition || !nutrition.serving) {\n                    new Notice('No nutritional data available for this item.');\n                    return;\n                }\n                const defaultServing = parseGrams(nutrition.serving);\n                if (isNaN(defaultServing)) {\n                    new Notice('Invalid default serving size.');\n                    return;\n                }\n                new CustomServingSizeModal(this.app, selected, defaultServing, (customServing) => __awaiter(this, void 0, void 0, function* () {\n                    this.meal.items.push(`${selected}:${customServing}g`);\n                    yield this.plugin.saveSettings();\n                    this.refreshItemList();\n                    new Notice(`${selected} (${customServing}g) added to ${this.meal.name}`);\n                })).open();\n            }\n            else {\n                new Notice('Item is already in the meal or not selected.');\n            }\n        });\n        this.itemListEl = contentEl.createEl('ul', {\n            attr: { style: 'list-style-type: none; padding-left: 0;' }\n        });\n        this.refreshItemList();\n        const finishBtn = contentEl.createEl('button', { text: 'Finish' });\n        finishBtn.onclick = () => {\n            this.close();\n            this.plugin.nutritionalSettingTab.display();\n        };\n    }\n    refreshItemList() {\n        if (!this.itemListEl)\n            return;\n        this.itemListEl.empty();\n        this.meal.items.forEach((item, index) => {\n            const li = this.itemListEl.createEl('li');\n            const span = li.createEl('span', { text: item });\n            span.style.marginRight = '0.5rem';\n            const removeBtn = li.createEl('button', { text: 'Ã—' });\n            removeBtn.style.marginLeft = '0.5rem';\n            removeBtn.onclick = () => __awaiter(this, void 0, void 0, function* () {\n                this.meal.items.splice(index, 1);\n                yield this.plugin.saveSettings();\n                this.refreshItemList();\n                new Notice(`Removed \"${item}\" from ${this.meal.name}`);\n            });\n        });\n    }\n    onClose() {\n        this.contentEl.empty();\n    }\n}\n","references":["C:/Users/James/Desktop/obsidian-macros-plugin/types/obsidian.d.ts","C:/Users/James/Desktop/obsidian-macros-plugin/utils.ts","C:/Users/James/Desktop/obsidian-macros-plugin/settings.ts","C:/Users/James/Desktop/obsidian-macros-plugin/api.ts","C:/Users/James/Desktop/obsidian-macros-plugin/utils.ts","C:/Users/James/Desktop/obsidian-macros-plugin/main.ts"]}
