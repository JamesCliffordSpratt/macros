{"code":"import { __awaiter } from \"tslib\";\nimport { PluginSettingTab, Setting, Notice } from 'obsidian';\nimport { getVaultFolders, renderMacronutrientPieChart } from './utils';\nimport { AddMealTemplateModal, EditMealTemplateModal } from './modals';\nimport { fetchFoodData } from './api';\nexport const DEFAULT_SETTINGS = {\n    storageFolder: 'Nutrition',\n    proteinColor: '#4caf50',\n    fatColor: '#f44336',\n    carbsColor: '#2196f3',\n    mealTemplates: [],\n    // Leave these empty by default so that the plugin uses the built-in credentials.\n    fatSecretApiKey: '',\n    fatSecretApiSecret: '',\n};\nexport class NutritionalSettingTab extends PluginSettingTab {\n    constructor(app, plugin) {\n        super(app, plugin);\n        this.plugin = plugin;\n    }\n    display() {\n        const { containerEl } = this;\n        containerEl.empty();\n        containerEl.createEl('h2', { text: 'Macros Plugin Settings' });\n        // Storage Folder Setting.\n        new Setting(containerEl)\n            .setName('Storage Folder')\n            .setDesc('Where to save food .md files')\n            .addText(text => {\n            text\n                .setPlaceholder('Nutrition')\n                .setValue(this.plugin.settings.storageFolder)\n                .onChange((value) => __awaiter(this, void 0, void 0, function* () {\n                this.plugin.settings.storageFolder = value;\n                yield this.plugin.saveSettings();\n            }));\n            const dataListEl = containerEl.createEl('datalist', { attr: { id: 'folderSuggestions' } });\n            const folders = getVaultFolders(this.plugin.app);\n            folders.forEach(folder => {\n                dataListEl.createEl('option', { attr: { value: folder } });\n            });\n            text.inputEl.setAttribute('list', 'folderSuggestions');\n            return text;\n        });\n        // Protein Color Setting.\n        new Setting(containerEl)\n            .setName('Protein Color')\n            .setDesc('Color code for Protein slice (e.g., #4caf50)')\n            .addText(text => {\n            text\n                .setPlaceholder('#4caf50')\n                .setValue(this.plugin.settings.proteinColor)\n                .onChange((value) => __awaiter(this, void 0, void 0, function* () {\n                this.plugin.settings.proteinColor = value;\n                yield this.plugin.saveSettings();\n                updatePreview();\n            }));\n            const proteinColorPicker = containerEl.createEl('input', { type: 'color', value: this.plugin.settings.proteinColor });\n            proteinColorPicker.style.marginLeft = '10px';\n            proteinColorPicker.addEventListener('change', () => __awaiter(this, void 0, void 0, function* () {\n                text.setValue(proteinColorPicker.value);\n                this.plugin.settings.proteinColor = proteinColorPicker.value;\n                yield this.plugin.saveSettings();\n                updatePreview();\n            }));\n            return text;\n        });\n        // Fat Color Setting.\n        new Setting(containerEl)\n            .setName('Fat Color')\n            .setDesc('Color code for Fat slice (e.g., #f44336)')\n            .addText(text => {\n            text\n                .setPlaceholder('#f44336')\n                .setValue(this.plugin.settings.fatColor)\n                .onChange((value) => __awaiter(this, void 0, void 0, function* () {\n                this.plugin.settings.fatColor = value;\n                yield this.plugin.saveSettings();\n                updatePreview();\n            }));\n            const fatColorPicker = containerEl.createEl('input', { type: 'color', value: this.plugin.settings.fatColor });\n            fatColorPicker.style.marginLeft = '10px';\n            fatColorPicker.addEventListener('change', () => __awaiter(this, void 0, void 0, function* () {\n                text.setValue(fatColorPicker.value);\n                this.plugin.settings.fatColor = fatColorPicker.value;\n                yield this.plugin.saveSettings();\n                updatePreview();\n            }));\n            return text;\n        });\n        // Carbs Color Setting.\n        new Setting(containerEl)\n            .setName('Carbs Color')\n            .setDesc('Color code for Carbs slice (e.g., #2196f3)')\n            .addText(text => {\n            text\n                .setPlaceholder('#2196f3')\n                .setValue(this.plugin.settings.carbsColor)\n                .onChange((value) => __awaiter(this, void 0, void 0, function* () {\n                this.plugin.settings.carbsColor = value;\n                yield this.plugin.saveSettings();\n                updatePreview();\n            }));\n            const carbsColorPicker = containerEl.createEl('input', { type: 'color', value: this.plugin.settings.carbsColor });\n            carbsColorPicker.style.marginLeft = '10px';\n            carbsColorPicker.addEventListener('change', () => __awaiter(this, void 0, void 0, function* () {\n                text.setValue(carbsColorPicker.value);\n                this.plugin.settings.carbsColor = carbsColorPicker.value;\n                yield this.plugin.saveSettings();\n                updatePreview();\n            }));\n            return text;\n        });\n        // Render a preview of the nutritional pie chart.\n        const previewContainer = containerEl.createDiv({ cls: 'macrospc-preview-container', attr: { style: 'margin-top: 16px; margin-bottom: 32px; display: flex; flex-direction: column; align-items: center;' } });\n        previewContainer.createEl('h3', { text: 'Pie Chart Preview' });\n        const previewCanvas = previewContainer.createEl('canvas', { attr: { width: '300', height: '300' } });\n        function updatePreview() {\n            const proteinInput = containerEl.querySelector('input[placeholder=\"#4caf50\"]');\n            const fatInput = containerEl.querySelector('input[placeholder=\"#f44336\"]');\n            const carbsInput = containerEl.querySelector('input[placeholder=\"#2196f3\"]');\n            const proteinColor = (proteinInput === null || proteinInput === void 0 ? void 0 : proteinInput.value) || '#4caf50';\n            const fatColor = (fatInput === null || fatInput === void 0 ? void 0 : fatInput.value) || '#f44336';\n            const carbsColor = (carbsInput === null || carbsInput === void 0 ? void 0 : carbsInput.value) || '#2196f3';\n            const ctx = previewCanvas.getContext('2d');\n            if (!ctx)\n                return;\n            // Use the shared rendering function with equal distribution for preview\n            renderMacronutrientPieChart(ctx, 33, 33, 34, proteinColor, fatColor, carbsColor);\n        }\n        updatePreview();\n        // --- Meal Templates Section ---\n        containerEl.createEl('h3', { text: 'Meal Templates' });\n        new Setting(containerEl)\n            .setName('Create a new Meal Template')\n            .setDesc('Click to add a new meal template')\n            .addButton(btn => {\n            btn.setButtonText('+ Add Meal Template').onClick(() => {\n                new AddMealTemplateModal(this.plugin).open();\n            });\n        });\n        this.plugin.settings.mealTemplates.forEach((meal) => {\n            new Setting(containerEl)\n                .setName(meal.name)\n                .setDesc(meal.items && meal.items.length > 0\n                ? meal.items.join(', ')\n                : 'No items')\n                .addButton(editBtn => {\n                editBtn\n                    .setButtonText('Edit')\n                    .setCta()\n                    .onClick(() => {\n                    new EditMealTemplateModal(this.plugin, meal).open();\n                });\n            })\n                .addButton(removeBtn => {\n                removeBtn\n                    .setButtonText('Remove')\n                    .setWarning()\n                    .onClick(() => __awaiter(this, void 0, void 0, function* () {\n                    this.plugin.settings.mealTemplates =\n                        this.plugin.settings.mealTemplates.filter(m => m.name !== meal.name);\n                    yield this.plugin.saveSettings();\n                    // Use a small timeout to allow any active inputs/modals to clean up before re-rendering\n                    setTimeout(() => this.display(), 300);\n                }));\n            });\n        });\n        // --- Advanced Settings ---\n        containerEl.createEl('h3', { text: 'Advanced' });\n        // Notice about API credentials.\n        const advancedNotice = containerEl.createDiv({ cls: 'advanced-notice', attr: { style: 'background-color: #ff3333; padding: 8px; margin-bottom: 8px; border: 1px solid #ffffff;' } });\n        advancedNotice.createEl('p', {\n            text: \"The default FatSecret API credentials are provided by the Macros Plugin for convenience. You are welcome to sign up for your own API credentials to ensure longevity if the default key becomes obsolete. To sign up, please visit \"\n        });\n        // Create a clickable link.\n        advancedNotice.createEl('a', {\n            text: \"https://platform.fatsecret.com/platform-api\",\n            attr: { href: \"https://platform.fatsecret.com/platform-api\", target: \"_blank\" }\n        });\n        advancedNotice.createEl('p', {\n            text: \"User-provided API credentials will be stored in plain text.\"\n        });\n        // FatSecret API Key Setting.\n        new Setting(containerEl)\n            .setName('FatSecret API Key')\n            .setDesc('Enter your FatSecret API Key. Leave blank to use the default provided by the Macros Plugin.')\n            .addText(text => {\n            // Leave the text box value empty if no user input exists.\n            text\n                .setPlaceholder(`Default API`)\n                .setValue(this.plugin.settings.fatSecretApiKey)\n                .onChange((value) => __awaiter(this, void 0, void 0, function* () {\n                this.plugin.settings.fatSecretApiKey = value; // empty value means default\n                yield this.plugin.saveSettings();\n            }));\n            return text;\n        });\n        // FatSecret API Secret Setting.\n        new Setting(containerEl)\n            .setName('FatSecret API Secret')\n            .setDesc('Enter your FatSecret API Secret. Leave blank to use the default provided by the Macros Plugin.')\n            .addText(text => {\n            text\n                .setPlaceholder(`Default API`)\n                .setValue(this.plugin.settings.fatSecretApiSecret)\n                .onChange((value) => __awaiter(this, void 0, void 0, function* () {\n                this.plugin.settings.fatSecretApiSecret = value;\n                yield this.plugin.saveSettings();\n            }));\n            return text;\n        });\n        // Advanced Settings: Test API Connection Button\n        new Setting(containerEl)\n            .setName('Test API Connection')\n            .setDesc('Click to test your current FatSecret API credentials.')\n            .addButton(button => {\n            button\n                .setButtonText('Test Connection')\n                .onClick(() => __awaiter(this, void 0, void 0, function* () {\n                const key = this.plugin.settings.fatSecretApiKey && this.plugin.settings.fatSecretApiKey.trim() !== \"\"\n                    ? this.plugin.settings.fatSecretApiKey.trim()\n                    : this.plugin.getDefaultApiKey();\n                const secret = this.plugin.settings.fatSecretApiSecret && this.plugin.settings.fatSecretApiSecret.trim() !== \"\"\n                    ? this.plugin.settings.fatSecretApiSecret.trim()\n                    : this.plugin.getDefaultApiSecret();\n                new Notice('Testing connection…');\n                try {\n                    // Use a common food search term as a test\n                    const results = yield fetchFoodData(this.plugin.app, \"apple\", 0, 1, key, secret);\n                    // Check if the results array has at least one item.\n                    if (results.length > 0) {\n                        new Notice('Test connection successful!');\n                    }\n                    else {\n                        new Notice('Test connection failed. No data returned. Please check your API credentials.');\n                    }\n                }\n                catch (error) {\n                    console.error('Error during test connection:', error);\n                    new Notice('Test connection failed. Please check your API credentials.');\n                }\n            }));\n        });\n    }\n}\n","references":["C:/Users/James/Desktop/obsidian-macros-plugin/types/obsidian.d.ts","C:/Users/James/Desktop/obsidian-macros-plugin/utils.ts","C:/Users/James/Desktop/obsidian-macros-plugin/modals.ts","C:/Users/James/Desktop/obsidian-macros-plugin/main.ts","C:/Users/James/Desktop/obsidian-macros-plugin/api.ts"]}
